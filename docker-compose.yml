
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    profiles:
      - live

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    profiles:
      - live

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8090}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    profiles:
      - live

  grafana:
    image: grafana/grafana:latest
    env_file: .env
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    profiles:
      - live

  # Temporary PostgreSQL for grafana and binance (refreshed on restart)
  postgres:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    profiles:
      - live

  # Persistent PostgreSQL for backtesting only (manual start)
  postgres-backtesting:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: backtesting
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./backtesting/database/init.sql:/docker-entrypoint-initdb.d/01-backtesting.sql
      - postgres_backtesting_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d backtesting"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    profiles:
      - backtesting
      - backtesting-job
      - live

  # All services now use containerized PostgreSQL

  historical-producer:
    build: ./data-processors/producer
    env_file: .env
    environment:
      - SYMBOLS=${SYMBOLS:-BTC/USDT}
      - BACKFILL_DAYS=${BACKFILL_DAYS:-7}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${BINANCE_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: sh -c "sleep 10 && python historical_producer.py"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: "no"
    profiles:
      - live

  realtime-producer:
    build: ./data-processors/producer
    env_file: .env
    environment:
      - SYMBOLS=${SYMBOLS:-BTC/USDT}
      - REALTIME_DELAY_SECONDS=${REALTIME_DELAY_SECONDS:-1}
      - TOPIC_NAME=${OHLCV_TOPIC}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${BINANCE_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: sh -c "sleep 15 && python realtime_producer.py"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
    profiles:
      - live

  ws-realtime-producer:
    build: ./data-processors/producer
    env_file: .env
    environment:
      - SYMBOLS=${SYMBOLS:-BTCUSDT,ETHUSDT}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - MARKET_STREAM_TOPIC=${MARKET_STREAM_TOPIC}
    command: sh -c "sleep 5 && python ws_realtime_producer.py"
    depends_on:
      - kafka
    restart: unless-stopped
    profiles:
      - live

  signals-consumer:
    build: ./data-processors/signals-consumer
    env_file: .env
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - OHLCV_TOPIC=${OHLCV_TOPIC}
      - MARKET_STREAM_TOPIC=${MARKET_STREAM_TOPIC}
      - SIGNALS_TOPIC=${TRADING_SIGNALS_TOPIC}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${BINANCE_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - INDICATOR_WINDOW=${INDICATOR_WINDOW:-200}
      - ENABLE_VALIDATION_LOGGING=${ENABLE_VALIDATION_LOGGING:-false}
    command: sh -c "sleep 20 && python consumer.py"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
    profiles:
      - live
  db-consumer:
    build: ./data-processors/db-consumer
    env_file: .env
    environment:
      - TOPIC_NAME=${OHLCV_TOPIC}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${BINANCE_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: sh -c "sleep 10 && python consumer.py"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
    profiles:
      - live

  metrics-collector:
    build: ./monitoring/metrics-collector
    env_file: .env
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${GRAFANA_DB}
    command: sh -c "sleep 5 && python metrics_collector.py"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      # uses containerized postgres
    restart: unless-stopped
    profiles:
      - live

  backtesting-job:
    build: ./backtesting
    env_file: .env
    environment:
      - POSTGRES_HOST=postgres-backtesting
      - POSTGRES_DB=backtesting
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SYMBOLS=${SYMBOLS:-BTCUSDT,ETHUSDT,ADAUSDT}
    depends_on:
      postgres-backtesting:
        condition: service_healthy
    restart: "no"
    profiles:
      - backtesting-job

  backtesting-dashboard:
    build:
      context: ./backtesting
      dockerfile: Dockerfile.dashboard
    env_file: .env
    environment:
      - POSTGRES_HOST=postgres-backtesting
      - POSTGRES_DB=backtesting
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8501:8501"
    depends_on:
      postgres-backtesting:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - backtesting
      - live

volumes:
  postgres_backtesting_data:
